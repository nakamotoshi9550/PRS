<NAME>customCreateProc
<DESC>
Invoked on create of record if set.
Reference to procedure from client is created by assigning the customCreateProc property
either for the fieldmap object, or - if that doesn't exist - for the browse object.         
Typical usage is for assigning the key value based on some criteria
(find the next cust.num etc).

To send more values to a server hook use the combination of properties 
bufferExtraFields - commaseparated list of fields and 
bufferExtraValues - corresponding pipe (or chr(1)) -separated list of values
These fields function as parameters it they don't exist in the database record being created.
To retrieve any value sent from the client use 
DYNAMIC-FUNCTION("getValue" IN SOURCE-PROCEDURE,"<fieldName>").

You can also pass a parameter back to the client by using the setOutputParam function:
DYNAMIC-FUNCTION("setOutputParam" IN SOURCE-PROCEDURE,"<some value>").
This parameter is retrieved on the client by issuing:
DYNAMIC-FUNCTION("getServerTransReturnParam").
<CODE> 
/* Create Customer
   Parameters:  New customer buffer
   
   Created: <cre.date> by <cre.user>

   To invoke: [fieldMapObject | browseObject]:customCreateProc = "<procname>".
   
   In this procedure use the getValue function to get to values passed from the client.
   
-----------------------------------------------------------------------------------*/
DEF INPUT  PARAM ihBuffer    AS HANDLE NO-UNDO.
DEF INPUT  PARAM icSessionId AS CHAR NO-UNDO.
DEF OUTPUT PARAM ocReturn    AS CHAR NO-UNDO. 

DEF VAR iCustNum AS INT NO-UNDO INIT 1.

DO ON ERROR UNDO, RETURN:
  FIND LAST Customer NO-LOCK NO-ERROR.
  IF AVAIL Customer THEN
    iCustNum = Customer.CustNum + 1.

  ihBuffer::CustNum = iCustNum.
END.
       
<NAME>customUpdateValProc
<DESC>
When modifying a record by using the standard mechanism of the FieldMap object (SaveRecord method) or a browse overlay object you can use your own procedure to perform validation and additional business logic.

To invoke the procedure assign the procedure name to the property customUpdateValProc for the fieldMap (or for the browse or browse overlay - if no fieldMap is linked).

If the update validation proc should act differently based on the action the current action can be obtained:
DYNAMIC-FUNCTION("getCurrentAction" IN SOURCE-PROCEDURE). /* create/update/delete */

To get a new value for a field when inside your procedure use the getValue function:

CharVariable = DYNAMIC-FUNCTION("getValue" IN SOURCE-PROCEDURE,"<field-name>").

Return an error message in ocReturn to break the transaction.

<CODE>
/* Some validation or other logic that may result in failure of update or create of the record
   
   Created: <cre.date> by <cre.user>

   To invoke: [fieldMapObject | browseObject]:customUpdateValProc = "<procname>".

-----------------------------------------------------------------------------------------*/   
DEF INPUT  PARAM icRowid             AS CHAR NO-UNDO.
DEF INPUT  PARAM icSessionId         AS CHAR NO-UNDO.
DEF OUTPUT PARAM ocReturn            AS CHAR NO-UNDO.  

FIND Customer WHERE ROWID(Customer) = TO-ROWID(icRowId) EXCLUSIVE-LOCK NO-ERROR.
IF AVAIL Customer THEN
  <automatically recalculate credit limit, f.ex>

<NAME>customDeleteValProc
<DESC>
When deleting a record by using the standard mechanism of the FieldMap object (DeleteRecord method) or browse object you can use your own procedure to perform validation and additional business logic.

To invoke the procedure assign the procedure name to the propery customDeleteValProc for the fieldMap (or for the browse - if no fieldMap is linked).

Return an error message in ocReturn to break the transaction.

<CODE>
/* If there's no fieldmap (viewer) set the attribute on the browse or query object

   Created: <cre.date> by <cre.user>

   To invoke: [fieldMapObject | browseObject]:customDeleteValProc = "<procname>".
-----------------------------------------------------------------------------------------*/   
DEF INPUT  PARAM icBufferName        AS CHAR NO-UNDO.
DEF INPUT  PARAM icRowid             AS CHAR NO-UNDO.
DEF INPUT  PARAM icSessionId         AS CHAR NO-UNDO.
DEF OUTPUT PARAM ocReturn            AS CHAR NO-UNDO.  

FIND Customer WHERE ROWID(Customer) = TO-ROWID(icRowId) EXCLUSIVE-LOCK NO-ERROR.
IF AVAIL Customer THEN
  /* check some condition to be met to allow the delete */

<NAME>postUpdateProc
<DESC>
After a successful create, update or delete of a record a procedure can be invoked to perform additional business logic. The post update logic is performed in the same transaction as the main action (create/update/delete).

icAction is either "create", "update" or "delete".

To get a new value for a field when inside your procedure use the getValue function:

CharVariable = DYNAMIC-FUNCTION("getValue" IN SOURCE-PROCEDURE,<field-name>).

To invoke the procedure assign the procedure name to the attribute postUpdateProc for the fieldMap (or for the browse or browse overlay - if no fieldMap is linked).

A return value other than "" indicates that an error has occured and the transaction will be backed out.

<CODE>
/* If there's no fieldmap (viewer) set the attribute on the browse or query object

   Created: <cre.date> by <cre.user>

   To invoke: [fieldMapObject | browseObject]:postUpdateProc = "<procname>".
   
   NOTE: If the action is DELETE the buffer handle is for a temp-table copy of the record that was deleted
-----------------------------------------------------------------------------------------*/   
DEF INPUT  PARAM ihBuffer       AS HANDLE NO-UNDO.  /* Handle to current buffer */
DEF INPUT  PARAM icAction       AS CHAR   NO-UNDO.  /* Delete, Create or Update */
DEF INPUT  PARAM icSessionId    AS CHAR   NO-UNDO.
DEF OUTPUT PARAM ocReturn       AS CHAR   NO-UNDO.  /* Error message. If <> blank the transaction is backed out */


DEF VAR cValue AS CHAR NO-UNDO.

/* To get a spesific value from current update: */
cValue = DYNAMIC-FUNCTION("getValue" IN SOURCE-PROCEDURE,"<field name>").
