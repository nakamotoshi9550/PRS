<NAME>Function
<DESC>Use to insert function in source without having to do the annoying update of function prototype (provided that you add the parameters here).
Also the function will be inserted correctly in the source file even if there are (call-back) function definitions for classes inside Definitions

<CODE>FUNCTION MyFunctionName RETURNS LOGICAL
  ( INPUT iMyParameter AS INT ) :
/*------------------------------------------------------------------------------
  Purpose: 
------------------------------------------------------------------------------*/

DO WITH FRAME {&FRAME-NAME}:

END.

RETURN YES.

END FUNCTION.

<NAME>Dynamic lookup OO
<DESC>Sorting is on first field. 
To manipulate the lookup query object add the callback procedure hook "myLookupObject" 
(probably use "WHERE false" as the initial query in this case).
To create a lookup button for a field use the clipboard conversion tool.
"<myProcName>" here should typically correspond to the procedure created from adding a tool to the toolbar

<CODE>
PROCEDURE <myProcName>:
  JBoxServerAPI:Instance:Lookup("<table>"
                    + ";<field1>"
                    + ";<field2>"
                   ,"WHERE true"
                   ,"<field1>,<field2>"   /* <- return values for these fields */
                    ).

  IF JBoxServerAPI:Instance:LookupOk THEN DO:
    ASSIGN <field1>:SCREEN-VALUE = JBoxServerAPI:Instance:LookupValue(<field1>)
           .

    APPLY "any-printable" TO <field1>.
  END.
  
<NAME>Dynamic lookup
<DESC>Sorting is on first field. You can change a lot by using the setLookupAttributes hook.
To create a lookup button for a field use the clipboard conversion tool.
See also the winsrc\samples\DynLookupUsage.w
"<myProcName>" here should typically correspond to the procedure created from adding a tool to the toolbar

<CODE>
PROCEDURE <myProcName>:
  DEF VAR cReturnValues   AS CHAR NO-UNDO.
  DEF VAR bOk             AS LOG  NO-UNDO.

  /* See also call-back procedure setLookupAttributes */

  THIS-PROCEDURE:CURRENT-WINDOW:SENSITIVE = FALSE.
  RUN JBoxLookup.w (THIS-PROCEDURE,50,
                    "Customer"
                    + ";Custnum"
                    + ";Name"
                   ,"WHERE false"
                    ,""                                                  
                    ,"CustNum,Name",   /* <- return (pipe-separated) values for these fields */
                      OUTPUT cReturnValues,
                      OUTPUT bOK).
  THIS-PROCEDURE:CURRENT-WINDOW:SENSITIVE = TRUE.

  IF bOk AND cReturnValues NE "" THEN DO:
    JBoxServerApi:
  END.
            
  THIS-PROCEDURE:CURRENT-WINDOW:MOVE-TO-TOP().
  

<NAME>Dynamic selector OO
<DESC>
To manipulate the selector query objectc add the callback procedure hook "mySelectorObject" 
To create a selector button for a field use the clipboard conversion tool.
"<myProcName>" here should typically correspond to the procedure created from adding a tool to the toolbar

<CODE>
PROCEDURE <myProcName>:
  DEF VAR cRowIdList  AS CHAR NO-UNDO.

  cRowIdList = JBoxServerAPI:Instance:getRowIdList("SalesRep","WHERE RepName BEGINS 'B'").
/*  cRowIdList = JBoxServerAPI:Instance:getRowIdList("<TableList>","<table for rowid>","<query>"). */
  
/*  JBoxServerAPI:Instance:SelectorDialog("SalesRep" */      
  JBoxServerAPI:Instance:Selector("SalesRep"      
                      + ";SalesRep"  
                      + ";RepName"
                      + ";MonthQuota[1]"
                      + ";MonthQuota[2]"
                      ,"where true",
                      cRowIdList).
  IF JBoxServerAPI:Instance:SelectorOk THEN
    MESSAGE JBoxServerAPI:Instance:SelectorRowidList skip(1)
            JBoxServerAPI:Instance:SelectorDeselectRowidList
    VIEW-AS ALERT-BOX.  
  


<NAME>Simple select list
<DESC>Example on how to call the select-list standard window object:

RUN JBoxDSimpleSelectList.w ("<list>",<posWidget>,OUTPUT cReturn).

Populated with salesreps:

RUN JBoxDSimpleSelectList.w (JBoxServerAPI:Instance:FieldList("Salesrep;RepName;SalesRep","WHERE true"),?,OUTPUT cReturn).


The list should be item-pairs delimited by pipe (|). The optional posWidget is the handle for some widget that the list should be positioned relative to.

If no selection the return parameter is unknown (?)

<CODE>

<NAME>MoveToTop
<DESC>MoveToTop is included in the template but in case you need to add it to an old .w..:
<CODE>PROCEDURE MoveToTop:

THIS-PROCEDURE:CURRENT-WINDOW:HIDDEN = NO.
IF DYNAMIC-FUNCTION("getAttribute",THIS-PROCEDURE,"advGuiWin") = "YES" THEN
  RUN ShowForm("").
THIS-PROCEDURE:CURRENT-WINDOW:WINDOW-STATE = 3.
THIS-PROCEDURE:CURRENT-WINDOW:MOVE-TO-TOP().
DYNAMIC-FUNCTION("DoLockWindow",?).
  
END PROCEDURE.

<NAME>InitializeObject
<DESC>InitializeObject is included in the template but in case you need to add it to an old .w..:
<CODE>PROCEDURE InitializeObject:

RUN enable_UI.

oContainer = NEW JBoxContainer().
oContainer:addStatusBar().

DO WITH FRAME {&FRAME-NAME}:

END.


oContainer:initResize().
  
END PROCEDURE.
<NAME>SplitBarX - Vertical splitbar where move is limited by a frame
<DESC>
Use the clipboard converter to collect a list of handles to follow splitbar movement. Also you need to set widgets to the left of
the splitbar to "NoResizeX"

<CODE>
PROCEDURE InitializeObject: 

oContainer:setSplitBarX(btnSplitBarX:HANDLE IN FRAME frSplitBarX).
oContainer:setFollowSplitBarX(<comma-sep list of widget handles>).
oContainer:setNoResizeX("<comma-sep list of widget names to the left of the splitbar>").

<CLIP>
&ANALYZE-SUSPEND _EXPORT-NUMBER AB_v10r12
&ANALYZE-RESUME
&Scoped-define WINDOW-NAME C-Win
&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE Window
&Scoped-define DB-AWARE no

/* Name of designated FRAME-NAME and/or first browse and/or first query */
&Scoped-define FRAME-NAME frSplitBarX

/* Internal Tables (found by Frame, Query & Browse Queries)             */
&Scoped-define INTERNAL-TABLES Customer Salesrep

/* Standard List Definitions                                            */
&Scoped-Define ENABLED-OBJECTS btnSplitBarX 

/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* ***********************  Control Definitions  ********************** */

/* Define the widget handle for the window                              */
DEFINE VAR C-Win AS WIDGET-HANDLE NO-UNDO.

/* Definitions of the field level widgets                               */
DEFINE BUTTON btnSplitBarX 
     IMAGE-UP FILE "bmp/tabright.bmp":U NO-FOCUS FLAT-BUTTON
     LABEL "" 
     SIZE .8 BY 11.43
     BGCOLOR 12 FGCOLOR 12 .


/* ************************  Frame Definitions  *********************** */

DEFINE FRAME frSplitBarX
     btnSplitBarX AT ROW 1.1 COL 20.6
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER 
         SIDE-LABELS NO-UNDERLINE THREE-D 
         AT COL 43.8 ROW 3.14
         SIZE 34.2 BY 11.57 WIDGET-ID 300.




/* ***********  Runtime Attributes and AppBuilder Settings  *********** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR WINDOW C-Win
  NOT-VISIBLE,,RUN-PERSISTENT                                           */
/* SETTINGS FOR FRAME frSplitBarX
                                                                        */
ASSIGN 
       btnSplitBarX:MOVABLE IN FRAME frSplitBarX          = TRUE.

IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(C-Win)
THEN C-Win:HIDDEN = yes.

/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME


/* Setting information for Queries and Browse Widgets fields            */

&ANALYZE-SUSPEND _QUERY-BLOCK FRAME frSplitBarX
/* Query rebuild information for FRAME frSplitBarX
     _Query            is NOT OPENED
*/  /* FRAME frSplitBarX */
&ANALYZE-RESUME

 



/* ************************  Control Triggers  ************************ */

&Scoped-define SELF-NAME btnSplitBarX
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btnSplitBarX 
ON END-MOVE OF btnSplitBarX IN FRAME frSplitBarX
DO:
  DYNAMIC-FUNCTION("setSplitBarX" , THIS-PROCEDURE:CURRENT-WINDOW, btnSplitBarX:HANDLE IN FRAME frSplitBarX,NO).
/*  RUN MoveToTop IN hCurrTabProc NO-ERROR.*/

  DYNAMIC-FUNCTION("ResizeKeepsWindowLocked",?).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btnSplitBarX 
ON START-MOVE OF btnSplitBarX IN FRAME frSplitBarX
DO:
  DYNAMIC-FUNCTION("ResizeKeepsWindowLocked",THIS-PROCEDURE:CURRENT-WINDOW).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&UNDEFINE SELF-NAME

<NAME>SplitBarY - Full width
<DESC>
Horizontal splitbar where move is limited by property settings

Use the clipboard converter to collect a list of handles to follow splitbar movement. Also you need to set widgets on top of
the splitbar to "NoResizeY".


<CODE>
PROCEDURE InitializeObject: 

oContainer:setSplitBarY(btnSplitBarY:HANDLE).
oContainer:setSplitBarYlimits(btnSplitBarY:HANDLE,200,300). /* 200 pixels from the top, 300 pixels from the bottom */
oContainer:setFollowSplitBarY(<comma-sep list of widget handles>).
oContainer:setNoResizeY("<comma-sep list of widget names on top of the splitbar>").

<CLIP>
&ANALYZE-SUSPEND _EXPORT-NUMBER AB_v10r12
&ANALYZE-RESUME
&Scoped-define WINDOW-NAME C-Win
&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE Window
&Scoped-define DB-AWARE no

/* Name of designated FRAME-NAME and/or first browse and/or first query */
&Scoped-define FRAME-NAME DEFAULT-FRAME

/* Internal Tables (found by Frame, Query & Browse Queries)             */
&Scoped-define INTERNAL-TABLES Customer

/* Standard List Definitions                                            */
&Scoped-Define ENABLED-OBJECTS btnSplitBarY new_tbCustomer edit_tbCustomer ~
copy_tbCustomer undo_tbCustomer delete_tbCustomer save_tbCustomer ~
excel_tbCustomer BrwCustomer CustNum Ordernum OrderDate Name OrderStatus ~
Address SalesRep Comments RepName TabCustomer tbCustomer 
&Scoped-Define DISPLAYED-OBJECTS CustNum Ordernum OrderDate Name ~
OrderStatus Address SalesRep Comments RepName 

/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* ***********************  Control Definitions  ********************** */

/* Define the widget handle for the window                              */
DEFINE VAR C-Win AS WIDGET-HANDLE NO-UNDO.

/* Definitions of the field level widgets                               */
DEFINE BUTTON btnSplitBarY 
     IMAGE-UP FILE "bmp/tabup.bmp":U NO-FOCUS FLAT-BUTTON
     LABEL "Button 1" 
     SIZE 142 BY .43.


/* ************************  Frame Definitions  *********************** */

FORM
     btnSplitBarY AT ROW 12.67 COL 2 WIDGET-ID 6
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY 
         SIDE-LABELS NO-UNDERLINE THREE-D 
         AT COL 1 ROW 1
         SIZE 143.8 BY 27.05 WIDGET-ID 100.




/* ***********  Runtime Attributes and AppBuilder Settings  *********** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR WINDOW C-Win
  NOT-VISIBLE,,RUN-PERSISTENT                                           */
/* SETTINGS FOR FRAME DEFAULT-FRAME
                                                                        */
/* BROWSE-TAB BrwCustomer excel_tbCustomer DEFAULT-FRAME */
ASSIGN 
       btnSplitBarY:MOVABLE IN FRAME DEFAULT-FRAME          = TRUE.

IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(C-Win)
THEN C-Win:HIDDEN = yes.

/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME

 



/* ************************  Control Triggers  ************************ */

&Scoped-define SELF-NAME btnSplitBarY
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btnSplitBarY 
ON END-MOVE OF btnSplitBarY IN FRAME DEFAULT-FRAME /* Button 1 */
DO:
  DYNAMIC-FUNCTION("setSplitBarY",THIS-PROCEDURE:CURRENT-WINDOW,btnSplitBarY:HANDLE IN FRAME {&FRAME-NAME},NO).
/*  apply "window-resized" to {&window-name}.*/
/*   RUN MoveToTop. */
/*   DYNAMIC-FUNCTION("MoveTabToTop" IN hTabFolder,OrderFolder:HANDLE). */
/*   RUN MoveToTop IN hCurrTabProc NO-ERROR.                            */
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&UNDEFINE SELF-NAME

<NAME>SplitBarY - limited by frame
<DESC>
Horizontal splitbar where move is limited by frame

Use the clipboard converter to collect a list of handles to follow splitbar movement. Also you need to set widgets on top of
the splitbar to "NoResizeY".


<CODE>
PROCEDURE InitializeObject: 

oContainer:setSplitBarY(btnSplitBarY:HANDLE IN FRAME frmSplitBarY).
oContainer:setFollowSplitBarY(<comma-sep list of widget handles>).
oContainer:setNoResizeY("<comma-sep list of names of resizeable widgets on top of the splitbar>").

<CLIP>
&ANALYZE-SUSPEND _EXPORT-NUMBER AB_v10r12
&ANALYZE-RESUME
&Scoped-define WINDOW-NAME C-Win
&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE Window
&Scoped-define DB-AWARE no

/* Name of designated FRAME-NAME and/or first browse and/or first query */
&Scoped-define FRAME-NAME frSplitBarY

/* Internal Tables (found by Frame, Query & Browse Queries)             */
&Scoped-define INTERNAL-TABLES ttSearch tt_file tt_field idx

/* Standard List Definitions                                            */
&Scoped-Define ENABLED-OBJECTS btnSplitBarY 

/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* ***********************  Control Definitions  ********************** */

/* Define the widget handle for the window                              */
DEFINE VAR C-Win AS WIDGET-HANDLE NO-UNDO.

/* Definitions of the field level widgets                               */
DEFINE BUTTON btnSplitBarY 
     IMAGE-UP FILE "bmp/tabdown.bmp":U NO-FOCUS FLAT-BUTTON
     LABEL "" 
     SIZE 44.2 BY .48
     BGCOLOR 8 .


/* ************************  Frame Definitions  *********************** */

DEFINE FRAME frSplitBarY
     btnSplitBarY AT ROW 1.95 COL 1
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY 
         THREE-D 
         AT COL 1 ROW 10.81
         SIZE 44.14 BY 4.73.




/* ***********  Runtime Attributes and AppBuilder Settings  *********** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR WINDOW C-Win
  VISIBLE,,RUN-PERSISTENT                                               */
/* SETTINGS FOR FRAME frSplitBarY
   NOT-VISIBLE UNDERLINE                                                */
ASSIGN 
       btnSplitBarY:MOVABLE IN FRAME frSplitBarY          = TRUE.

IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(C-Win)
THEN C-Win:HIDDEN = no.

/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME


/* Setting information for Queries and Browse Widgets fields            */

&ANALYZE-SUSPEND _QUERY-BLOCK FRAME frSplitBarY
/* Query rebuild information for FRAME frSplitBarY
     _Query            is NOT OPENED
*/  /* FRAME frSplitBarY */
&ANALYZE-RESUME

 



/* ************************  Control Triggers  ************************ */

&Scoped-define SELF-NAME btnSplitBarY
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btnSplitBarY 
ON END-MOVE OF btnSplitBarY IN FRAME frSplitBarY
DO:
  DYNAMIC-FUNCTION("setSplitBarY",THIS-PROCEDURE:CURRENT-WINDOW, btnSplitBarY:HANDLE IN FRAME frSplitBarY,NO).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&UNDEFINE SELF-NAME


<NAME>Browse overlay fill-in
<DESC>
Use to enable update of browse cell with lookup option.

To just enable column(s) in the browse set this property on the browse object:

<QueryObject>:enabledColumns = "pos,tekst,belop".

To enable edit on double-click:

<QueryObject>:enabledOnDblClick = YES.

To enable edit using a toolbar to enable (new),edit,undo and save actions:

<QueryObject>:editUsingOverlayFieldMap = yes.

NOTE: In this case there is no check if another user changed the record after it was read to the client. 

<CODE>
PROCEDURE InitializeObject: 

DEF VAR oBrwFillIn<field-name> AS JBoxBrowseFillIn NO-UNDO.

oBrwFillIn<field-name> = NEW JBoxBrowseFillIn(<QueryObject>,"column-name","<lookup buffer;field1;field2..>","<lookup query>","<return value for field>").

<NAME>Browse overlay drop-down
<DESC>
Use to enable update of browse cell for drop-down.

To just enable column(s) in the browse set this property on the browse object:

<QeuryObject>:enabledColumns = "pos,tekst,belop".

To enable edit on double-click:

<QueryObject>:enabledOnDblClick = YES.

To enable edit using a toolbar to enable (new),edit,undo and save actions:

<QueryObject>:editUsingOverlayFieldMap = yes.

NOTE: In this case there is no check if another user changed the record after it was read to the client. 

<CODE>
PROCEDURE InitializeObject: 

DEF VAR oBrwDropDown<field-name> AS JBoxBrowseDropDown NO-UNDO.

oBrwDropDown<field-name> = NEW JBoxBrowseDown(<QueryObject>,"column-name","<dropdown buffer;field1;field2..>","<dropdown query>","<return value for field>").


