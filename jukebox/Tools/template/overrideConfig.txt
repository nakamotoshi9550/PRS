<NAME>NewRecord
<TYPE>Tool
<DESC>NewRecord is automatically invoked by the tool NEW
<DESC>If no fieldMap is linked the record will be created in the browse
<DESC>To create a new row locally in the browse before committing it to the database useLocalData to YES on the browse 

If NewRecord is invoked by a lookup the code might go something like this (from samles\dynLookupUsage.w):

DEF VAR hTBContainer AS HANDLE NO-UNDO.

IF DYNAMIC-FUNCTION("getCurrentObject") = hTBlookup THEN DO:
  /* If JBoxDynMenu.w is running you can start the detail window via the menu system  
  PUBLISH "StartChildWindow" 
          ("CustomerDetail.w",
           "Customer",
           THIS-PROCEDURE,
           NO,
           OUTPUT hCustomerDetail).     
  */            
  
  RUN CustomerDetail.w PERSIST SET hCustomerDetail.
  RUN InitializeObject IN hCustomerDetail.
  DYNAMIC-FUNCTION("CreateOneToOneLink",DYNAMIC-FUNCTION("getQuery" IN hCustomerDetail),hBrwLookup,"custnum").

/* If the toolbar for details is in the detail-container: */

/*   DYNAMIC-FUNCTION("setParentToolbar" IN hCustomerDetail,hTBlookup).       */
/*   hTBContainer = DYNAMIC-FUNCTION("getToolbarHandle" IN hCustomerDetail).  */
/*   IF hTBContainer NE hTBLookup THEN                                        */
/*     DYNAMIC-FUNCTION("MergeToolbars",hTBlookup,hTBContainer).              */
/*   DYNAMIC-FUNCTION("setAttribute",hTBContainer,"disabledevents","filter"). */

  DYNAMIC-FUNCTION("setCloseOnSave" IN hCustomerDetail,YES).
  RUN NewRecord IN hCustomerDetail.
  SUBSCRIBE PROCEDURE THIS-PROCEDURE TO "InvalidateHandle" IN hCustomerDetail.
END.

<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
       
<NAME>EditRecord
<TYPE>Tool
<DESC>EditRecord is automatically invoked by the tool EDIT.
      The use of the edit tool sets input fields to read-only or not sensitive when not in edit mode
      If you don't have a toolbar (dialog f.ex) you could set the fieldMap in edit mode by using it's editRecord method
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>EmailRecord
<TYPE>Tool
<DESC>EmailRecord has no standard (SUPER) implementation.
      Add the tool Email to the toolbar for automatic assignment of button image and
      invocation of EmailRecord. Sample: 
      
CODE DEF VAR oJboxEmail AS JBoxEmailViaDefaultClient NO-UNDO.
CODE DEF VAR cToList    AS CHAR NO-UNDO.
CODE DEF VAR cCcList    AS CHAR NO-UNDO.
CODE DEF VAR cBccList   AS CHAR NO-UNDO.
CODE DEF VAR cSubject   AS CHAR NO-UNDO.
CODE DEF VAR cBody      AS CHAR NO-UNDO.
CODE 
CODE PUBLISH "getEmailContext" (OUTPUT cToList,OUTPUT cCcList,OUTPUT cBccList,OUTPUT cSubject,OUTPUT cBody).

CODE bDownLoadToTempDir = YES. /* for automatic selection of file download cat */
CODE RUN SaveToDisc. /* See f.ex obj\JBoxViewDocTreeBrw.w for implementation */
CODE oJBoxEmail = NEW JBoxEmailViaDefaultClient(cSubject,cBody,cDocDownloadList).
      
<NAME>FilterRecord
<TYPE>Tool
<DESC>FilterRecord is automatically invoked by the tool Filter.
      
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>FirstRecord
<TYPE>Tool/Browse
<DESC>FirstRecord is automatically invoked by the tool First or when HOME is pressed on the browse.
      
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>LastRecord
<TYPE>Tool/Browse
<DESC>LastRecord is automatically invoked by the tool Last or when END is pressed on the browse.
      
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>NextRecord
<TYPE>Tool
<DESC>NextRecord is automatically invoked by the tool Next.
      
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>PrevRecord
<TYPE>Tool
<DESC>PrevRecord is automatically invoked by the tool Prev.
      
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>EntryOfWidget
<TYPE>FieldMap/Browse
<DESC>Standard implementation is to view correct help information for current field or browse	
      Use the IsCurrent property for the (fieldMap) object to verify where you're at and then the currentField property to determine which field was entered
      
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  IF <fieldmapObject>:isCurrent THEN DO WITH FRAME {&FRAME-NAME}:
<CODE>    CASE <fieldmapObject>:currentField:
<CODE>      WHEN "custnum" THEN DO:
<CODE>      END.
<CODE>    END CASE.
<CODE>  END.

<NAME>CopyRecord
<TYPE>Tool
<DESC>CopyRecord is automatically invoked by the tool COPY
      Note that if you need to know if the SAVE is from a copy (in SaveRecord)
      you need to set a flag here to indicate this
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>DeleteRecord
<TYPE>Tool
<DESC>DeleteRecord is automatically invoked by the tool DELETE
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>UndoRecord
<TYPE>Tool
<DESC>UndoRecord is automatically invoked by the tool UNDO
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>SaveRecord
<TYPE>Tool
<DESC>SaveRecord is automatically invoked by the tool SAVE
<DESC>Typically you'd like to pass additional information to the save operation here.
<DESC>Also you might need to know wether the save operation is for a new (or copy of a) record.
<DESC>To add additional fields and data use the property bufferExtraFields (comma-sep list)"
<DESC>with corresponding values set using the bufferExtraValues (pipe-separated)."
<DESC>To determine if it's a new record check the toolbar-state (before RUN SUPER):"
<DESC>cTbState = <toolbarObject>:objectState.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>DisplayRecord
<TYPE>Browse/Query
<DESC>DisplayRecord is automatically invoked whenever a value-changed event occurs on the browse or query
<DESC>Typical action to do before RUN SUPER:" 
<DESC> - enable/disable tools based on data in current row:
<DESC>   <toolbarObject>:disabledTools = "new,edit,..".
<DESC>Typical action to do after RUN SUPER:"
<DESC> - enable/disable input fields to override default behaviour
<CODE>  IF <browseObject>:isCurrent THEN DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  IF <queryObject>:isCurrent THEN  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>DefaultActionBrowse
<TYPE>Browse
<DESC>DefaultActionBrowse is automatically invoked whenever a double-click or ENTER event occurs on the browse
<DESC>A typical action is to start the most commonly used funtion for the record
<DESC> 
<DESC>For a updateable browse the DefaultAction enables the row - if it's not open by default
<DESC>
To start a new child-tab for viewing details for the browserow you could do something like this:

DEF VAR hChildTab AS HANDLE NO-UNDO.
DEF VAR cRowId    AS CHAR   NO-UNDO.

IF oBrwObjekt:IsCurrent THEN DO:
  cRowId = Objekt.RowIdent1.
  
  hChildTab = JBoxSession:Instance:StartChildTab("Obje_ny.w",
                                     "Kontrakt", /* Tab title */
                                     NO, /* Don't start new instance if one is active */
                                     NO). /* Close the child tab on close of this program */

  RUN FlatViewDblClick IN hChildTab("Objekt",cRowId). /* or some other smart way to communicate the record.. */

END.

<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.
<CODE>  RUN SUPER.
<CODE>  DO WITH FRAME {&FRAME-NAME}:
<CODE>    
<CODE>  END.

<NAME>OpenQuery
<TYPE>Browse/Query
<DESC>A typical override of OpenQuery is to manually set the queryFilter, queryWhere etc.

It is also a good spot to f.ex assign a context-sensitive query for drop-down values. 
In this example only the persons related to cases ("Sak") via x-ref table SakKobling are shown
(note the DISTINCT option to get unique names):

oBrwSakKobling:setFilterDropDownQuery("cNavn",
  "SakKobling,Sak,Person;DISTINCT cNavn;cNavn",
  "WHERE prg-nr = " + STRING(oBrwSakKobling:PARENT-QUERY-OBJECT:BUFFER-HANDLE::prg-nr)
  + ",FIRST Sak NO-LOCK OF SakKobling"
  + ",FIRST Person NO-LOCK WHERE Person.iPersonId = Sak.iPersSaksansvar BY Person.cNavn").

<CODE>  RUN SUPER.

<NAME>FlatViewRecord
<TYPE>Tool
<DESC>
<DESC>Since the flatview (databrowse) will inherit the basequery from the navigation (top-level) query
this is the place to change it's baseQuery temporarly - if needed:

DEF VAR cBaseQ  AS CHAR NO-UNDO.

cBaseQ = oQryEiendom:baseQuery.

oQryEiendom:baseQuery = "WHERE prg-nr = " + STRING(Eiendom.Prg-nr).

RUN SUPER.

oQryEiendom:baseQuery = cBaseQ.

<CODE>  RUN SUPER.

<NAME>StartSearch
<TYPE>Browse
<DESC>Invoked when a browse column is selected for sorting
<DESC>Note that "OpenQuery" is not executed after StartSearch
<DESC>However the value-changed event is applied so that DisplayRecord is invoked
<DESC>
<DESC>
<CODE>  RUN SUPER.

<NAME>PrintRecord
<TYPE>Tool
<DESC>Invoked from the print button
<DESC>
<DESC>
<CODE>  

<NAME>NoteRecord
<TYPE>Tool
<DESC>Save note
<DESC>
<DESC>
<CODE>  RUN SUPER.
  IF DYNAMIC-FUNCTION("getAttribute",hToolbarDok,"NoteCurrentValueChanged") = "yes" THEN DO:  
    DYNAMIC-FUNCTION("DoUpdate",hFieldMapDok:NAME,"",
                      "",hFieldMapDok:BUFFER-FIELD("RowIdent1"):BUFFER-VALUE,
                      "cMerknad",DYNAMIC-FUNCTION("getAttribute",hToolbarDok,"NoteCurrentValue"),
                     YES).
    DYNAMIC-FUNCTION("RefreshRowids",hBrowseDok,hFieldMapDok:BUFFER-FIELD("RowIdent1"):BUFFER-VALUE).
  END.

<NAME>ReturnOfWidget
<TYPE>FieldMap
<DESC>Procedure to capture RETURN on a field defined in a fieldMap object

Note that you need to figure out which field is current, here the old way:

DEF VAR ihField   AS HANDLE NO-UNDO.

ihField = DYNAMIC-FUNCTION("getCurrentWidget").

IF ihField:MODIFIED THEN DO WITH FRAME {&FRAME-NAME}:

END.

RUN SUPER.

<CODE>
IF oFm<MyFieldMap>:currentFieldModified THEN DO WITH FRAME {&FRAME-NAME}:
  
  CASE oFm<MyFieldMap>:currentField:
    WHEN ".." THEN DO:
    END.
  END CASE.
END.  
RUN SUPER.

<NAME>RowDisplayBrowse
<TYPE>Browse
<DESC>Procedure to control cell properties (typically color)

Note that you cannot use methods on the browse widget here to access browse columns.
Use a handle variable and assign it like this:

hMyBrowseColumn = oBrw<..>:getColumnHandle("<MyBrowseColumnName>").


To access a column value (buffer value) use similar approach:

hMyBufferColumn = oBrw<..>:BUFFER-HANDLE:BUFFER-FIELD("<MyBufferColumnName>").

Ex:

RUN SUPER.

IF hNyForfField:BUFFER-VALUE NE ? THEN
  hForfallColumn:BGCOLOR = 6.
ELSE hForfallColumn:BGCOLOR = ?.


<CODE>
RUN SUPER.

<NAME>RefreshRecord
<TYPE>Tool
<DESC>Refresh data - invoked by the Refresh tool (button)

Note that there is a separate method for refreshing a browse (RefreshBrowseRecord) doing basically the same - default invoked by the F5 key.

A typical scenario for override of this method is when you have built a local resultset and then 
disconneced the set from the database (by setting useLocalData = yes).


<CODE>
RUN SUPER.

<NAME>RefreshBrowseRecord
<TYPE>Browse
<DESC>Refresh all rows in a client portion of a result set. 

Note that there is a separate method (doing the same) for refresh invoked by the toolbar tool Refresh (RefreshRecord).

A typical scenario for override of this method is when you have built a local resultset and then 
disconneced the set from the database (by setting useLocalData = yes).

The method is also directly accessible from the browse or query class as Refresh.
To refresh selected row(s) use the RefreshRow method of the class.

<CODE>
RUN SUPER.

