# protools/abhack/customTabCompletion.txt is a list of custom aliases to use with ABHack
#
# Do not hesitate to customize this file (as all other abhack config files)
# HOWEVER DO NOT FORGET TO MAKE A BACKUP OF YOUR MODIFICATIONS BEFORE APPLYING
# A NEW RELEASE OF ABHACK.  If you believe a particular alias should be implemented
# in the standard release, then please do not hesitate to send an email to
# sebastien@slacroix.fr
#
# Do not forget to put a carriage return at the end of the file
# Lines that begins with '#' are ignored
# This file is reloaded each time you recheck its corresponding toggle-box
# One can define alaises for the matches operator
# ~n => insert carriage return
# %\d  => date in your *own* format (European, or American) => better than with VSlick
# %\c put the cursor there  /* 18-DEC-2006 sla: Improvement: %\c now work for aliases that insert multiple lines */
# %\( will make ABHack insert a '(' in such a way it can guess where to put the matching ')'
# %\wBuffer => to be replaced by the next chosen buffer in a popup list  /* 17-FEB-2007 sla: new buffer directive */
#
# this one is great to hack things
seeh DEFINE VARIABLE hhack AS HANDLE      NO-UNDO.~nhhack = WIDGET-HANDLE("%\c").~nMESSAGE hhack:~n  VIEW-AS ALERT-BOX INFO BUTTONS OK.
#
# A4GBL aliases
Targ* TARGET-PROCEDURE
this THIS-PROCEDURE
UNFOR* UNFORMATTED 
{&Se* {&SELF-NAME}
{&br* {&BROWSE-NAME}
{&fr* {&FRAME-NAME}
{&wi* {&WINDOW-NAME}
&Se* {&SELF-NAME}
&br* {&BROWSE-NAME}
&fr* {&FRAME-NAME}
&wi* {&WINDOW-NAME}
AVAIL AVAILABLE 
fifav FIND FIRST %\c NO-LOCK WHERE .~nIF AVAILABLE %\wBuffer THEN
fifna FIND FIRST %\c NO-LOCK WHERE .~nIF NOT AVAILABLE %\wBuffer THEN
fifnb FIND FIRST %\c NO-LOCK WHERE .~nIF NOT AVAILABLE %\wBuffer THEN DO:~n    CREATE %\wBuffer.~n    BUFFER-COPY  TO %\wBuffer.~nEND.
fifnc FIND FIRST %\c NO-LOCK WHERE .~nIF NOT AVAILABLE %\wBuffer THEN DO:~n    CREATE %\wBuffer.~n    ASSIGN %\wBuffer = .~nEND.
fifdo FIND FIRST %\c NO-LOCK WHERE .~nIF NOT AVAILABLE %\wBuffer THEN DO:~n    ~nEND.
ifav IF AVAILABLE %\c THEN
ifna IF NOT AVAILABLE %\c THEN
ifnb IF NOT AVAILABLE %\c THEN DO:~n    CREATE %\wBuffer.~n    BUFFER-COPY  TO %\wBuffer.~nEND.
ifnc IF NOT AVAILABLE %\c THEN DO:~n    CREATE %\wBuffer.~n    ASSIGN %\wBuffer = .~nEND.
ifdo IF NOT AVAILABLE %\c THEN DO:~n    ~nEND.
BUFFER-F BUFFER-FIELD(%\c)
BUFFER-F BUFFER-FIELD(%\c):BUFFER-VALUE
CHAR CHARACTER
INT INTEGER
INT INTEGER%\(
DEC DECIMAL
DEC DECIMAL%\(
DESC DESCENDING
LOG LOGICAL
LOG LOGICAL%\(
CAN-F CAN-FIND(
dds DEFINE DATA-SET %\c FOR ~n DATA-RELATION
dss DEFINE DATA-SOURCE %\c FOR
dqq DEFINE QUERY q%\c FOR 
DEF DEFINE 
doiet DO iEntry = 1 TO NUM-ENTRIES(%\c):~n    ~nEND.
ffm FRAME fMain
ffx FIND FIRST %\c EXCLUSIVE-LOCK WHERE 
ffn FIND FIRST %\c NO-LOCK WHERE 
fif FIND FIRST 
foe FOR EACH %\c ~nEND.
fon FOR EACH %\c NO-LOCK WHERE ~nEND.
fox FOR EACH %\c EXCLUSIVE-LOCK WHERE ~nEND.
fxl FIND FIRST %\c WHERE  EXCLUSIVE-LOCK
fnl FIND FIRST %\c WHERE  NO-LOCK 
fre FOR EACH %\c WHERE  EXCLUSIVE-LOCK ~nEND.
frn FOR EACH %\c WHERE  NO-LOCK ~nEND.
FILE- FILE-INFO:FILE-NAME
FILE- FILE-INFO:FULL-PATHNAME
FONT- FONT-TABLE
FRA* FRAME
FRA* FRAME {&FRAME-NAME}
FORMA FORMAT "X(%\c)"
FUNC* FUNCTION %\c RETURNS ( ):
PROC* PROCEDURE %\c:
EMPT* EMPTY TEMP-TABLE %\c.
EXCL* EXCLUSIVE-LOCK 
LEFT- LEFT-TRIM%\(
NUM-E* NUM-ENTRIES%\(
ner NO-ERROR
PARA* PARAMETER 
PERS* PERSISTENT 
QUOT QUOTER%\(
REPL* REPLACE%\(
RETURN-V* RETURN-VALUE
rtn RETURN-VALUE
RIGHT- RIGHT-TRIM%\(
SOURCE-* SOURCE-PROCEDURE
SUBSTI SUBSTITUTE%\(
SUBSTR SUBSTRING%\(
STR STRING%\(
TRI TRIM%\(
VALI* VALID-HANDLE%\(
VAR VARIABLE 
WIDGET-* WIDGET-HANDLE%\(
Wgh* WIDGET-HANDLE%\(
WIDGET-P* WIDGET-POOL
RUN RUN %\c IN TARGET-PROCEDURE.
RUN RUN %\c.p
RUN RUN %\c.w
dpb DEFINE PARAMETER BUFFER %\wBuffer FOR %\c.
dbf DEFINE BUFFER %\wBuffer FOR %\c.
dtt DEFINE TEMP-TABLE %\c NO-UNDO LABEL ""~n FIELD  AS .
err ERROR-STATUS:ERROR
dynl* {dynlaunch.i~n  &PLIP  = '%\c.p'~n  &IProc = ''~n  &mode1 = INPUT  &parm1 = ''   &dataType1 = CHARACTER ~n  &mode2 = INPUT  &parm2 = ''   &dataType2 = INTEGER}
dynl* {dynlaunch.i &define-only=YES}
launch {launch.i~n  &PLIP  = '%\c.p'~n  &IProc = ''~n  &PList = "( )"~n  &autokill = NO}
dyn DYNAMIC-FUNCTION('%\c')
dynt DYNAMIC-FUNCTION('%\c' IN TARGET-PROCEDURE)
dynm* DYNAMIC-FUNCTION('%\c' IN gshAladinManager)
globa* {adm2/globals.i}
#
# ADM2/Dynamics API's
assignW* assignWidgetValue(%\c, )
assignW* assignWidgetValueList(%\c, , )
blankW* blankWidget(%\c)
clearW* clearWidget(%\c)
disableW* disableWidget(%\c)
enableW* enableWidget(%\c)
formattedW* formattedWidgetValue(%\c)
hideW* hideWidget(%\c)
highlightW* highlightWidget(%\c)
toggleW* toggleWidget(%\c)
viewW* viewWidget(%\c)
widgetH* widgetHandle(\%c)
widgetV* widgetValue(%\c)
widgetVL* widgetValueList(%\c, )
rowo rowObject
afer* {aferrortxt.i 'AD' '%\c' '' '' }
#
#
lirtn {&libReturnValueAndStack}
#
# Al@din Aliases
adrtn {&adReturnValueAndStack}
adPrP* adPrProcessDate()
adVnP* adVnProcessDate()
adVnG* adVnGet%\("%\c"
adPrG* adPrGet%\("%\c"
adUse* adUseSequence( (BUFFER %\c:BUFFER-FIELD(""):HANDLE), cEntity, cSeqTLA)
chkErr IF ERROR-STATUS:ERROR THEN RETURN ERROR %\c {&adReturnValueAndStack}.
chkRtn IF RETURN-VALUE > THEN RETURN %\c {&adReturnValueAndStack}.
sla /* %\d sla: %\c */
#jcc /* %\d jcc: %\c */
#jba /* %\d jba: %\c */
#ael /* %\d ael: %\c */
#msa /* %\d msa: %\c */
#ffa /* %\d ffa: %\c */
#sme /* %\d sme: %\c */
#mde /* %\d mde: %\c */
#myv /* %\d myv: %\c */
#otr /* %\d otr: %\c */
#tlu /* %\d tlu: %\c */
# STIM team - JCC 13/12/2006
#adr /* %\d 054adr: %\c */
#alo /* %\d 054alo: %\c */
#ari /* %\d 054ari: %\c */
#caz /* %\d 054caz: %\c */
#eda /* %\d 054eda: %\c */
#edu /* %\d 054edu: %\c */
#egu /* %\d 054egu: %\c */
#eso /* %\d 054eso: %\c */
#gca /* %\d 054gca: %\c */
#ggm /* %\d 054ggm: %\c */
#gvm /* %\d 054gvm: %\c */
#jdi /* %\d 054jdi: %\c */
#kya /* %\d 054kya: %\c */
#lba /* %\d 054lba: %\c */
#lvz /* %\d 054lvz: %\c */
#mgc /* %\d 054mgc: %\c */
#mro /* %\d 054mro: %\c */
#slc /* %\d 054slc: %\c */
UIOPDEx UIOPDEx is a heretical construct.  Please do not use it
adc_parameter PLEASE DO NOT REFER DIRECTLY TO THE adc_parameter TABLE BUT USE THE MANAGER API's
# JukeBox Aliases
seta DYNAMIC-FUNCTION("setAttribute",h%\c,"","").
geta DYNAMIC-FUNCTION("getAttribute",h%\c,"")
dyna DYNAMIC-FUNCTION("%\c").
col DYNAMIC-FUNCTION("CreateObjectLink",h%\c,h).
dol DYNAMIC-FUNCTION("DeleteObjectLink",hBrowse,hTabQuery).
sco DYNAMIC-FUNCTION("setCurrentObject",h%\c).
gco DYNAMIC-FUNCTION("getCurrentObject")
gpq hTabQuery = DYNAMIC-FUNCTION("getPageQuery" IN hTabFolder,iCurrTab).
cpl DYNAMIC-FUNCTION("CreateParentLink",h%\c,hParent,"key1[;parent-key1],key2..").
coo DYNAMIC-FUNCTION("CreateOneToOneLink",h%\c,hParent,"key1,key2..").
nbr hBrowse = DYNAMIC-FUNCTION("NewBrowse"~n,rect%\c:HANDLE~n,100~n,""~n,"buffer"~n + ";field"~n,"WHERE ..."~n,"").
nqu hQuery = DYNAMIC-FUNCTION("NewQuery"~n,100~n,""~n,"buffer"~n + ";field"~n,"WHERE ..."~n,"").
nfm hFieldMap = DYNAMIC-FUNCTION("NewFieldMap"~n,hBrowse:QUERY~n,FRAME {&FRAME-NAME}:HANDLE~n,"%\cupdfld1,updfld2..",""~n,"dispfld1,dispfld2..",""~n,"").
ntb hToolbar = DYNAMIC-FUNCTION("NewToolBar"~n,ToolBar:HANDLE~n,"Fil"~n,"new;Ny,copy;Kopier,undo;Angre,delete;Slett,save;Lagre,excel;Eksporter til E&xcel"~n,"maxborder").
nmb DYNAMIC-FUNCTION("NewMenuBand",hBrowse~n,"MultiSortBrowse;Sorter på flere kolonner"~n,"").
nbs hSearchField = DYNAMIC-FUNCTION("NewBrowseSearchField",RectBrowseSearch:HANDLE,hBrowse,1).~nDYNAMIC-FUNCTION("createObjectLink",hBrowse,hSearchField).
nbf hOverlay  = DYNAMIC-FUNCTION("NewBrowseFillIn",hBrowse,"%\cbrowse col.name","buffer col.name"~n,"lookup table;field1;field2;..","WHERE false","return field"~n,"").
nbt hOverlay  = DYNAMIC-FUNCTION("NewBrowseToggle",hBrowse,"%\cbrowse col.name","buffer col.name","").
nco   DYNAMIC-FUNCTION("NewObject",THIS-PROCEDURE:CURRENT-WINDOW,THIS-PROCEDURE,"container").
npr   DYNAMIC-FUNCTION("NewObject",THIS-PROCEDURE:CURRENT-WINDOW,THIS-PROCEDURE,"procedure").
covl DYNAMIC-FUNCTION("CreateOverlayLink",hBrowse,hOverlay,"browse col.name").
nbd hDropDown = DYNAMIC-FUNCTION("NewBrowseDropDown",hBrowse,"%\cbrowse col.name","buffer col.name"~n,"dropdown table;field1;field2;..","WHERE true","alt.value list"~n,"").
glo  DYNAMIC-FUNCTION("GetLinkedObject",%\h,"obj.type","from/to").
flo D-F("setAtt",hBrowse,"filterlookupfields_%\c","b&f").~nD-F("setAtt",hBrowse,"filterlookupquery_fld","qry").~nD-F("setAtt",hBrowse,"filterlookupreturnfield_Salesrep","fld").
dom DYNAMIC-FUNCTION("DoMessage",MsgNum,Type 0:OK/1 1:Ok/1-Ca/2 2:Ab/3-Re/4-Ig/5 3:Y/6-N/7-Can/2 4:Y/6-N/7 5:Re/4-Ca/2 6:Ca/2-Ret/10-Cnt/11 20:Npad~n,"Msgtxt","Title","subst")
idf DYNAMIC-FUNCTION("InitDynFilter",hBrowseOrQuery,"field1,field2..","operator1,oper..","value1|value2..","try(opt)").
psr DYNAMIC-FUNCTION("ProcessSelectedRows",hBrowse,"<server_progname.p>",paramstring)
prq DYNAMIC-FUNCTION("ProcessQuery",hBrowse,"<server_progname.p>",paramstring)
low DYNAMIC-FUNCTION("DoLockWindow",THIS-PROCEDURE:CURRENT-WINDOW).
ukwl DYNAMIC-FUNCTION("setAttribute",SESSION,"userkeepswindowlocked","yes").
sss DYNAMIC-FUNCTION("setSortString",hBrowse,"field1;[desc],field2..").
ncs DYNAMIC-FUNCTION("setNoColumnSort",hBrowse,"col-name1,col-name2..").
inm RUN InvokeMethod(h%\c,"MethodName").
gts DYNAMIC-FUNCTION("getToolbarState",hToolbar)
rer DYNAMIC-FUNCTION("RefreshRowids",hQueryObject,"RowIdent1,rowid..").
afv RUN JBoxAskForValue.w ("<message>","<datatype>|<format>|<opt:init.val>",INPUT-OUTPUT <char_var>,OUTPUT iReturn).~nIF iReturn = 2 THEN DO: ~nEND.  
bmu RUN JBoxBrowseMsgUpdateVal.w ("<message>",~nhBrowse:NUM-SELECTED-ROWS,~nDYNAMIC-FUNCTION("getAttribute",hBrowse,"recordcount"),~n"<datatype>|<format>|<opt:init.val>",~nOUTPUT ocValue,~nOUTPUT iReturn).
pbr IF iReturn = 2 THEN~n psr.~nELSE IF iReturn = 1 THEN DO:~n  IF prq THEN~n    RUN InvokeMethod(hBrowse,"OpenQuery").~nEND.
# Resize aliases
nrx DYNAMIC-FUNCTION("setNoResizeX", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"ToolBar").
nry DYNAMIC-FUNCTION("setNoResizeY", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"ToolBar").
arx DYNAMIC-FUNCTION("setAddResizeX", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"field1,field2..").
ary DYNAMIC-FUNCTION("setAddResizeY", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"field1,field2..").
amx DYNAMIC-FUNCTION("setAddMoveX", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"field1,field2..").
amy DYNAMIC-FUNCTION("setAddMoveY", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"field1,field2..").
nmx DYNAMIC-FUNCTION("setNoMoveX", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"field1,field2..").
nmy DYNAMIC-FUNCTION("setNoMoveY", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,~n"field1,field2..").
sbx DYNAMIC-FUNCTION("setSplitBarX",THIS-PROCEDURE:CURRENT-WINDOW, btnSplitBarX:HANDLE IN FRAME frSplitBarX,NO).
sby DYNAMIC-FUNCTION("setSplitBarY",THIS-PROCEDURE:CURRENT-WINDOW, btnSplitBarY:HANDLE IN FRAME frSplitBarY,NO).
rxg DYNAMIC-FUNCTION("setResizeXGroup", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,%\percent,"field1,field2..").
ryg DYNAMIC-FUNCTION("setResizeYGroup", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,%\percent,"field1,field2..").
mxg DYNAMIC-FUNCTION("setMoveXGroup", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,%\percent,"field1,field2..").
myg DYNAMIC-FUNCTION("setMoveYGroup", THIS-PROCEDURE:CURRENT-WINDOW, FRAME {&FRAME-NAME}:HANDLE,%\percent,"field1,field2..").
fsbx DYNAMIC-FUNCTION("setFollowSplitBarX",THIS-PROCEDURE:CURRENT-WINDOW,btnSplitBarX:HANDLE IN FRAME frSplitBarX,~nSTRING(hBrowse1) + "," STRING(hBrowse2)). 
fsby DYNAMIC-FUNCTION("setFollowSplitBarY",THIS-PROCEDURE:CURRENT-WINDOW,btnSplitBarY:HANDLE IN FRAME frSplitBarY,~nSTRING(hBrowse1) + "," STRING(hBrowse2)). 
spyl DYNAMIC-FUNCTION("setSplitBarYlimits",btnSplitBarY:HANDLE IN FRAME {&FRAME-NAME},250,180).
ows DYNAMIC-FUNCTION("setOrgWinSize", THIS-PROCEDURE:CURRENT-WINDOW,MinXmove,MinYmove,0,0).
wir DYNAMIC-FUNCTION("setWidgetResize",THIS-PROCEDURE:CURRENT-WINDOW,THIS-PROCEDURE:CURRENT-WINDOW,"Resize","").
wra DYNAMIC-FUNCTION("setWidgetResize",FRAME {&FRAME-NAME}:FIRST-CHILD,THIS-PROCEDURE:CURRENT-WINDOW,"Adjust","").
# Appserver library aliases
gfl DYNAMIC-FUNCTION("getFieldList","buffer;field;field..,buffer2..","WHERE ").
gfv DYNAMIC-FUNCTION("getFieldValues","buffer","WHERE ","field1,field2..").
gau DYNAMIC-FUNCTION("getASuserId")
gci DYNAMIC-FUNCTION("getCompanyId")
gco DYNAMIC-FUNCTION("getCompany")
docre DYNAMIC-FUNCTION("DoCreate","buffer","validation",~n"field1,field2..",~nvalue1|value2..,~ncommit(YES/NO)).
doupd DYNAMIC-FUNCTION("DoUpdate","buffer","validation",~n"keyfield1,keyfield2.. OR blank",~nkeyvalue1,keyvalue2.. OR ROWID,~n"field1,field2..",~nvalue1|value2..,~ncommit(YES/NO)).
gtm DYNAMIC-FUNCTION("getTransactionMessage").
rup DYNAMIC-FUNCTION("runProc","proc_name.p","parameter_string",tt-handle)
gtt DYNAMIC-FUNCTION("getTempTable","proc_name.p | blank","parameter_string | table-name|querystring",hBuffer).
# Server aliases
gva DYNAMIC-FUNCTION("getValue" IN SOURCE-PROCEDURE,"field")

